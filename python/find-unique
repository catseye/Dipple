#!/usr/bin/env python

"""
Find unique files.

Usage: find-unique src-dir {dest-dir | dest-index}

List all files in src-dir which are not to be found anywhere (under any name)
in any of the dest-dirs or dest-indexes.

src-dir may be somewhere inside one of the dest-dirs.  src-dir will not be
traversed during dest-dir traveral.  (really?  doesn't always seem to work)

index files are identified by being files instead of dirs.  index files
should be created by mk-dups-index.

"""

import hashlib
import os
import re
import sys


def load_index(filename, hashindex):
    f = open(filename, 'r')
    for line in f:
        match = re.match(r'^(.*?)\s+(.*?)$', line)
        if match:
            hashindex.setdefault(match.group(1), []).append(match.group(2))
    f.close()


def md5(filename):
    """Compute and return the MD5 hash of the named file.

    """
    hash = hashlib.md5()
    file = open(filename, "r")
    eof = False
    while not eof:
        data = file.read(128)
        if data:
            hash.update(data)
        else:
            eof = True
    file.close()
    return hash.hexdigest()


def build_hashmap(dir, hashmap, exclude=None):
    for root, dirs, files in os.walk(dir):
        if os.path.normpath(root) == exclude:
            print "(skipping %s)" % exclude
            dirs[:] = []
        else:
            for filename in files:
                full = os.path.normpath(os.path.join(root, filename))
                try:
                    hash = md5(full)
                    hashmap.setdefault(hash, []).append(full)
                except IOError as e:
                    print str(e)


### MAIN ###

def main(argv):
    dir_a = os.path.normpath(argv[1])
    print "traversing %s..." % dir_a
    a = {}
    build_hashmap(dir_a, a)

    b = {}
    for arg in argv[2:]:
        dest = os.path.normpath(arg)
        if os.path.isdir(dest):
            print "traversing %s..." % dest
            build_hashmap(dest, b, exclude=dir_a)
        else:
            print "reading index %s..." % dest
            load_index(dest, b)

    for hash in a:
        if hash not in b:
            for filename in a[hash]:
                print filename

if __name__ == '__main__':
    main(sys.argv)
